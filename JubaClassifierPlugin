
This is Jubaclassifier class, same raw data sent to this class, this 'loadData' method will 
format the raw data into tuples and request classifier to get a weightage
//package us.jubat.example.gender;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import org.apache.commons.configuration.Configuration;
import org.apache.log4j.Logger;
import org.mortbay.log.Log;
import org.zestadz.adsearch.server.data.CacheDataPlugin;

import com.ms134.pservice.pcache.PCache;
import com.ms134.pservice.pcache.PCacheException;
import com.ms134.pservice.pcache.PKey;

import us.jubat.classifier.ClassifierClient;
import us.jubat.classifier.Datum;
import us.jubat.classifier.EstimateResult;
import us.jubat.classifier.TupleStringDatum;
import us.jubat.classifier.TupleStringDouble;
import us.jubat.classifier.TupleStringString;

public class JubatusClassifierPlugin extends CacheDataPlugin<Double> {
  String host = "192.168.1.38";
	int port = 9180;
	String name = "JubaClassifierTest";
	long refreshRate;
	int predictId;
	Configuration conf;
	ClassifierClient client;
	
	private static final Logger LOG = Logger.getLogger(JubatusClassifierPlugin.class);
	
	public void configure(Configuration conf) {
		this.conf = conf;
		try {
			client = new ClassifierClient(host, port, 1.0);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void refresh() throws IOException {
		try {
		} catch (PCacheException e) {
			IOException rte = new IOException(e);
			rte.setStackTrace(e.getStackTrace());
			throw rte;
		}

	}
	
	@Override
	public void stop() {
		// close all predict resources
	}

	@SuppressWarnings("unchecked")
	@Override
	public final Double loadData(Object... arg) {

		Map<String, Object> pcacheArgs = (HashMap<String, Object>) arg[0];
		int predictId = (Integer) pcacheArgs.get("predict_id");

		ArrayList<Datum> testData = new ArrayList<Datum>();
		Datum predictDatum = makeDatumArray(pcacheArgs.entrySet());
//		Log.info("Data is here...."+predictDatum.string_values);
		// this is the key to search predict for
		double prob = 0;
		try {
			List<List<EstimateResult>> results = client.classify(name,
					Arrays.asList(predictDatum));
			ArrayList<Double> sortAds = new ArrayList<Double>();
			for (List<EstimateResult> result : results) {
				LOG.info("****Classifier Results ******"+results.size());
				LOG.info("****Classifier Result ******"+result.size());
				for (EstimateResult r : result) {
					LOG.info("**********Juabtus label data:"+r.label+"**********Score data"+r.score);
					//System.out.printf("%s %f\n", r.label, r.score);
					sortAds.add(r.score);
				}
				LOG.info("Juabtus sort iteration data:"+sortAds);
				
			}
			try{
				prob = Collections.max(sortAds);
			}
			catch (Exception e) {
				LOG.error("Collection Exception", e);
			}
			LOG.info("Juabtus prob data before returning:"+prob);

		} catch (PCacheException e) {
			LOG.error("PCache Exception", e);
		}
		// return predict result here
		return prob;
	}

	private static Datum makeDatumArray(Set<Entry<String, Object>> entries){//,
	//		double height) {
		Datum d = new Datum();
		d.string_values = new ArrayList<TupleStringString>();
		d.num_values = new ArrayList<TupleStringDouble>();
		
		for (Entry<String, Object> entry : entries) {
			
			if (!entry.getKey().equalsIgnoreCase("predict_id")) {
				String k = entry.getKey();
				Object v = entry.getValue();
				System.out.println(k+" ************* "+v);
				d.string_values.add(makeStringTuple(k, String.valueOf(v) ));
			}
		}		
		return d;
	}

	
	private static TupleStringString makeStringTuple(String first, String second) {
		TupleStringString t = new TupleStringString();
		t.first = (String) first;
		t.second = (String) second;
		return t;
	}

	private static TupleStringDouble makeDoubleTuple(String first, double second) {
		TupleStringDouble t = new TupleStringDouble();
		t.first = first;
		t.second = second;
		return t;
	}

}
